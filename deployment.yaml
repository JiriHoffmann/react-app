apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: react-chat-app
  name: react-chat-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: react-chat-app
  template:
    metadata:
      labels:
        app: react-chat-app
    spec:
      containers:
          # Update with correct project name
        - image: gcr.io/final-346218/react-chat-app:latest
          imagePullPolicy: Always
          name: react-chat-app

---
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  labels:
    app: react-chat-app
  name: react-chat-app-hpa
spec:
  maxReplicas: 5
  metrics:
    - resource:
        name: cpu
        targetAverageUtilization: 80
      type: Resource
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: react-chat-app

---
apiVersion: v1
kind: Service
metadata:
  name: react-chat-app-load-balancer
  annotations:
    # Doesn't give an external ip
    cloud.google.com/load-balancer-type: "Internal"
  labels:
    app: react-chat-app
spec:
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
  selector:
    app: react-chat-app
  type: LoadBalancer

---
apiVersion: "networking.k8s.io/v1"
kind: Ingress
metadata:
  name: react-chat-app-ingress
  annotations:
    # Update with a certificate name
    networking.gke.io/managed-certificates: "680-chat-app-cert"
    # Update with static ip name
    kubernetes.io/ingress.global-static-ip-name: "chat-app-ip"
    kubernetes.io/ingress.class: "gce-internal"
    kubernetes.io/ingress.allow-http: "false"
spec:
  defaultBackend:
    serviceName: react-chat-app-load-balancer
    servicePort: 80
  rules:
  - http:
      paths:
      - path: /*
        pathType: ImplementationSpecific
        backend:
          serviceName: react-chat-app-load-balancer
          servicePort: 80
